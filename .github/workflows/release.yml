name: Release and Publish

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      release-created: ${{ steps.release.outputs.release-created }}
      tag-name: ${{ steps.release.outputs.tag-name }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run tests
      run: npm run test:ci

    - name: Generate release notes
      id: release-notes
      run: |
        # Get the latest tag
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        CURRENT_TAG=${GITHUB_REF#refs/tags/}

        echo "Generating release notes for $CURRENT_TAG"

        # Generate changelog
        if [ -n "$LATEST_TAG" ]; then
          echo "## Changes since $LATEST_TAG" > release_notes.md
          git log --pretty=format:"- %s (%h)" $LATEST_TAG..$CURRENT_TAG >> release_notes.md
        else
          echo "## Initial Release" > release_notes.md
          echo "This is the first release of the decomment CLI tool." >> release_notes.md
        fi

        # Add package info
        echo "" >> release_notes.md
        echo "## Package Information" >> release_notes.md
        echo "- Version: $(node -p "require('./package.json').version")" >> release_notes.md
        echo "- Node.js compatibility: $(node -p "require('./package.json').engines.node")" >> release_notes.md

        cat release_notes.md

    - name: Create GitHub Release
      id: release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        body_path: release_notes.md
        draft: false
        prerelease: false

  publish:
    name: Publish to NPM
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: release
    if: needs.release.outputs.release-created == 'true'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
        registry-url: 'https://registry.npmjs.org'

    - name: Install dependencies
      run: npm ci

    - name: Run tests
      run: npm run test:ci

    - name: Check if version already exists
      id: version-check
      run: |
        PACKAGE_VERSION=$(node -p "require('./package.json').version")
        PACKAGE_NAME=$(node -p "require('./package.json').name")

        echo "Checking if $PACKAGE_NAME@$PACKAGE_VERSION already exists on NPM..."

        if npm view "$PACKAGE_NAME@$PACKAGE_VERSION" version 2>/dev/null; then
          echo "Version $PACKAGE_VERSION already exists on NPM"
          echo "skip-publish=true" >> $GITHUB_OUTPUT
        else
          echo "Version $PACKAGE_VERSION does not exist, proceeding with publish"
          echo "skip-publish=false" >> $GITHUB_OUTPUT
        fi

    - name: Publish to NPM
      if: steps.version-check.outputs.skip-publish == 'false'
      run: npm publish
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

    - name: Skip publishing (version exists)
      if: steps.version-check.outputs.skip-publish == 'true'
      run: |
        echo "‚ö†Ô∏è Skipping NPM publish - version already exists"
        echo "This is expected behavior and not an error"

    - name: Create success comment
      if: steps.version-check.outputs.skip-publish == 'false'
      uses: actions/github-script@v7
      with:
        script: |
          const packageInfo = require('./package.json');
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number || 1,
            body: `üéâ Successfully published ${packageInfo.name}@${packageInfo.version} to NPM!`
          });

  notify-failure:
    name: Notify on Failure
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [release, publish]
    if: failure()

    steps:
    - name: Create failure issue
      uses: actions/github-script@v7
      with:
        script: |
          const title = `Release workflow failed for ${context.ref}`;
          const body = `
          ## Release Workflow Failure

          The release workflow failed for tag \`${context.ref}\`.

          **Workflow Run:** ${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}

          **Possible causes:**
          - NPM authentication token expired or invalid
          - Network issues during publishing
          - Test failures
          - Version conflicts

          Please check the workflow logs and retry the release if necessary.

          **Auto-generated by GitHub Actions**
          `;

          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: title,
            body: body,
            labels: ['bug', 'release', 'automated']
          });
